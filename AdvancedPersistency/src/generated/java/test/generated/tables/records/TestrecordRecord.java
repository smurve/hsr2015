/**
 * This class is generated by jOOQ
 */
package test.generated.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.Testrecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestrecordRecord extends UpdatableRecordImpl<TestrecordRecord> implements Record4<Long, String, String, String> {

	private static final long serialVersionUID = -1604899175;

	/**
	 * Setter for <code>hsr2015.TestRecord.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>hsr2015.TestRecord.id</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>hsr2015.TestRecord.firstArg</code>.
	 */
	public void setFirstarg(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>hsr2015.TestRecord.firstArg</code>.
	 */
	public String getFirstarg() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>hsr2015.TestRecord.innerOrOuter</code>.
	 */
	public void setInnerorouter(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>hsr2015.TestRecord.innerOrOuter</code>.
	 */
	public String getInnerorouter() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>hsr2015.TestRecord.secondArg</code>.
	 */
	public void setSecondarg(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>hsr2015.TestRecord.secondArg</code>.
	 */
	public String getSecondarg() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, String, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Testrecord.TESTRECORD.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Testrecord.TESTRECORD.FIRSTARG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Testrecord.TESTRECORD.INNEROROUTER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Testrecord.TESTRECORD.SECONDARG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getFirstarg();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getInnerorouter();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getSecondarg();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestrecordRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestrecordRecord value2(String value) {
		setFirstarg(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestrecordRecord value3(String value) {
		setInnerorouter(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestrecordRecord value4(String value) {
		setSecondarg(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestrecordRecord values(Long value1, String value2, String value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TestrecordRecord
	 */
	public TestrecordRecord() {
		super(Testrecord.TESTRECORD);
	}

	/**
	 * Create a detached, initialised TestrecordRecord
	 */
	public TestrecordRecord(Long id, String firstarg, String innerorouter, String secondarg) {
		super(Testrecord.TESTRECORD);

		setValue(0, id);
		setValue(1, firstarg);
		setValue(2, innerorouter);
		setValue(3, secondarg);
	}
}
